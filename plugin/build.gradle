/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.2.1/userguide/custom_plugins.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'maven-publish'
    id("com.gradle.plugin-publish") version "1.2.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.2')
        }

        // Create a new test suite
        functionalTest(JvmTestSuite) {
            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation project()
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) }
                }
            }
        }
    }
}

dependencies {
    implementation gradleApi()
    implementation 'com.github.javaparser:javaparser-core:3.25.4'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.4'

    compileOnly("org.projectlombok:lombok:1.18.28")
    annotationProcessor("org.projectlombok:lombok:1.18.28")

}

gradlePlugin {
    website = 'https://github.com/brain-lv/java-enum-finder'
    vcsUrl = 'https://github.com/brain-lv/java-enum-finder.git'
    plugins {
        javaEnumFinder {
            id = 'lv.brain.gradle.javaEnumFinder'
            displayName = 'Java Enum Finder Gradle Plugin'
            description = 'The Java Enum Finder is a Gradle plugin designed to search for usages of specific Java Enum classes in your project\'s main source. The plugin scans through the source code files to find occurrences of the specified enums and reports the files and line numbers where these enums are used.'
            tags.set(['java', 'enum', 'search'])
            implementationClass = 'lv.brain.gradle.JavaEnumFinderPlugin'
        }
    }
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.functionalTest)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}